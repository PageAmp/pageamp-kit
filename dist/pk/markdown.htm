<lib>
	<:import src="base.htm"/>
	<style data-name="markdown" :pk_markdown_codeBg="#203E5A">
		.pk-markdown {
			line-height: 1.5em;
			/* padding: 1em; */
			/* border: 1px solid rgba(0,0,0,.15); */
			margin: 0;
		}
		.pk-markdown code {
			color: #fff;
			background: [[pk_markdown_codeBg]];
			padding: .15em .3em;
			border-radius: 3px;
			margin: 0 .2em;
			vertical-align: 5%;
		}
		.pk-markdown code .pk-keyword {
			color: #ff6a76;
		}
		.pk-markdown code .pk-attribute {
			color: #A2DD3E;
		}
		.pk-markdown code .pk-value {
			color: #E5DB78;
		}
		.pk-markdown code .pk-expression {
			color: #6AD9EF;
		}
		.pk-markdown pre {
			margin: 0;
		}
		.pk-markdown pre > code {
			display: block;
			line-height: 1.25em;
			padding: 1.2em 1.6em;
			border-radius: 0;
			margin: 0;
			overflow-x: auto;
		}
		@media (prefers-color-scheme: dark) {
			.pk-markdown code {
				color: #f4f4f4;
				background: [[cssColorOffset(pk_markdown_codeBg, 20, 1.5, 1)]];
			}
		}
	</style>

	<!--- https://www.markdownguide.org/cheat-sheet -->
	<:define tag="pk-markdown" class="pk-markdown" :text="" :headings=[[ [] ]]

		:on_text=[[
			var hh = [];

			// preprocess
			var s = '\n' + text;
			s = s.split('<').join('&lt;');
			// we replace newlines to work better with regexs
			s = regex('(\\n){2,}', 'mg').map(s, (re) -> '<br2>');
			s = regex('(\\n)', 'mg').map(s, (re) -> '<br1>');

			s = doHeaders(s, hh);
			//TODO s = doLists(s);
			//TODO s = doImages(s);
			//TODO s = doLinks(s);
			//TODO s = doBlockquotes(s);

			// second last
			s = doCodeFence(s);
			s = doInlineCode(s);

			// always last
			s = doEmphasis(s);

			// post process
			s = regex('^(\\s*<br.>)', 'mg').map(s, (re) -> '');
			s = regex('<br2>', 'mg').map(s, (re) -> '<p></p>\n');
			s = regex('<br1>', 'mg').map(s, (re) -> '<br/>\n');
			
			headings = hh;
			dom.innerHTML = s;
		]]

		:doHeaders=[[function(s, hh) {
			s = regex('<br.>?(#+)\\s+([^<]*)', 'g').map(s, (re) -> {
				var n = re.matched(1).length;
				var s = trim(re.matched(2));
				var id = lowerCase(regex('\\s+', 'g').replace(s, '-'));
				hh.push(id);
				return '<'+'h'+n+'>' + s + '<'+'/h'+n+'>\n';
			});
			return s;
		}]]

		:doEmphasis=[[function(s) {
			s = regex('\\*\\*(.+?)\\*\\*', 'g').map(s, (re) -> '<b>' + re.matched(1) + '</b>');
			s = regex('__(.+?)__', 'g').map(s, (re) -> '<b>' + re.matched(1) + '</b>');
			s = regex('\\*(.+?)\\*', 'g').map(s, (re) -> '<i>' + re.matched(1) + '</i>');
			s = regex('_(.+?)_', 'g').map(s, (re) -> '<i>' + re.matched(1) + '</i>');
			return s;
		}]]

		:doInlineCode=[[function(s) {
			s = regex('`(.+?)`', 'g').map(s, (re) -> '<code>' + re.matched(1) + '</code>');
			return s;
		}]]

		:doCodeFence=[[function(s) {
			s = regex('```(.+?)```(<br.>)?', 'g').map(s, (re) -> {
				var s = re.matched(1);
				s = regex('<br2>', 'g').map(s, (re) -> '\r\r');
				s = regex('<br1>', 'g').map(re.matched(1), (re) -> '\r');
				s = doCodeHighlight(s);
				s = s.split('\t').join('    ');
				s = s.split('\r').join('\n');
				s = trim(s);
				return '<pre><code>' + s + '</code></pre>';
			});
			return s;
		}]]

		:doCodeHighlight=[[function(s) {
			s = regex('&lt;(\\/)?(.*?)>', 'g').map(s, (re) -> {
				// matches tags
				var slash = re.matched(1) != null ? re.matched(1) : '';
				var s = re.matched(2);
				s = regex('([\\w:\\-]+)\\s*=\\s*(".*?")', 'g').map(s, (re) -> {
					// matches attributes
					var k = re.matched(1);
					var v = re.matched(2);
					return '<span class="pk-attribute">' + k + '</span>'
					+ '='
					+ '<span class="pk-value">' + v + '</span>';
				});
				return '&lt;' + slash + '<span class="pk-keyword">' + s + '</span>>';
			});
			s = s.split('&#91;[').join('&#91;[<span class="pk-expression">');
			s = s.split(']' + ']').join('</span>]' + ']');
			return s;
		}]]
		
	/>
</lib>
